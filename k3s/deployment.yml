apiVersion: apps/v1
kind: Deployment
metadata:
  name: products
  namespace: egs-mar-ket-place
spec:
  replicas: 1
  selector:
    matchLabels:
      app: products
  template:
    metadata:
      labels:
        app: products
    spec:
      containers:
      - name: products
        image: registry.deti:5000/mar_ket/produtos:v1
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
          - containerPort: 8888
        volumeMounts:
          - name: longhorn-product-volume
            mountPath: /app_cont/db
      volumes:
      - name: longhorn-product-volume
        persistentVolumeClaim:
          claimName: longhorn-product-volume-claim

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: entities
  namespace: egs-mar-ket-place
spec:
  replicas: 1
  selector:
    matchLabels:
      app: entities
  template:
    metadata:
      labels:
        app: entities
    spec:
      containers:
      - name: entities
        image: registry.deti:5000/mar_ket/entities:v1
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
          - containerPort: 8888
        volumeMounts:
          - name: longhorn-entities-volume
            mountPath: /app_cont/db
      volumes:
      - name: longhorn-entities-volume
        persistentVolumeClaim:
          claimName: longhorn-entities-volume-claim
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payments
  namespace: egs-mar-ket-place
spec:
  replicas: 1
  selector:
    matchLabels:
      app: payments
  template:
    metadata:
      labels:
        app: payments
    spec:
      containers:
      - name: payments
        image: registry.deti:5000/mar_ket/payments:v1
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 8081

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sales-db
  namespace: egs-mar-ket-place
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sales-db
  template:
    metadata:
      labels:
        app: sales-db
    spec:
      containers:
        - name: postgres
          image: postgres:13
          env:
            - name: POSTGRES_USER
              value: "admin"
            - name: POSTGRES_PASSWORD
              value: "pass"
            - name: POSTGRES_DB
              value: "sales_api"
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgres-sales-volume
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-sales-volume
          persistentVolumeClaim:
            claimName: postgres-sales-volume-claim

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sales
  namespace: egs-mar-ket-place
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sales
  template:
    metadata:
      labels:
        app: sales
    spec:
      containers:
      - name: sales
        image: registry.deti:5000/mar_ket/sales:latest
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 8888
        command: ["python","/opt/app/manage.py","runserver","0.0.0.0:8000"]
        env:
          - name: DB_NAME
            value: "sales_api"
          - name: DB_HOST
            value: "sales-db-service"
          - name: DB_PORT
            value: "5432"
          - name: DB_PASSWORD
            value: "pass"
          - name: DB_USER
            value: "admin"
          - name: DEFAULT_CURRENCY
            value: "EUR"
          - name: PAYMENTS_API_URL
            value: "http://payments-service:8081/payments"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authservice
  namespace: egs-mar-ket-place
spec:
  replicas: 1
  selector:
    matchLabels:
      app: authservice
  template:
    metadata:
      labels:
        app: authservice
    spec:
      containers:
      - name: authservice
        image: registry.deti:5000/mar_ket/authservice:latest
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 5000
        volumeMounts:
          - name: auth-jwt-secret
            mountPath: "/tmp/secrets/auth-jwt-secret"
            readOnly: true
          - name: auth-app-secret
            mountPath: "/tmp/secrets/auth-app-secret"
            readOnly: true
        env:
          - name: REDIS_CN_STRING
            value: "redis://:@redis-db-service:6379/0"
          - name: PARSE
            value: "http://parse-service:1337"
      volumes:
        - name: auth-app-secret
          secret:
            secretName: auth-app-secret
        - name: auth-jwt-secret
          secret:
            secretName: auth-jwt-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: parse-server
  namespace: egs-mar-ket-place
spec:
  replicas: 1
  selector:
    matchLabels:
      app: parse-server
  template:
    metadata:
      labels:
        app: parse-server
    spec:
      containers:
        - name: parse-server
          image: bitnami/parse:latest
          ports:
            - containerPort: 1337
          env:
            - name: PARSE_DATABASE_NAME 
              value: "bitnami_parse"
            - name: PARSE_DATABASE_PASSWORD
              value: "bitnami123"
            - name: PARSE_DATABASE_HOST
              value: "mongodb-parse-service"
            - name: PARSE_DATABASE_PORT_NUMBER
              value: "27017"
            - name: PARSE_DATABASE_USER
              value: "bn_parse"
            - name: PATH
              value: "/opt/bitnami/python/bin:/opt/bitnami/node/bin:/opt/bitnami/mongodb/bin:/opt/bitnami/parse/bin:/opt/bitnami/common/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
            - name: BITNAMI_APP_NAME
              value: "parse"

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb-parse
  namespace: egs-mar-ket-place
spec:
  serviceName: mongodb-parse
  replicas: 1
  selector:
    matchLabels:
      app: mongodb-parse
  template:
    metadata:
      labels:
        app: mongodb-parse
    spec:
      containers:
        - name: mongodb-parse
          image: bitnami/mongodb:latest
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongodb-data-parse
              mountPath: /data/db
          env:
            - name: MONGODB_USERNAME
              value: "bn_parse"
            - name: MONGODB_DATABASE 
              value: "bitnami_parse"
            - name: MONGODB_PASSWORD 
              value: "bitnami123"
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: PATH 
              value: "/opt/bitnami/mongodb/bin:/opt/bitnami/common/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
            - name: BITNAMI_APP_NAME 
              value: "mongodb"
      volumes:
        - name: "mongodb-data-parse"
          persistentVolumeClaim:
            claimName: mongo-data-auth


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kong-gateway
  namespace: egs-mar-ket-place
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kong-gateway
  template:
    metadata:
      labels:
        app: kong-gateway
    spec:
      containers:
      - name: kong-gateway
        image: docker.io/kong/kong-gateway:3.2.1.0
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        env:
          - name: KONG_LOG_LEVEL
            value: "notice"
          - name: KONG_PROXY_LISTEN
            value: "0.0.0.0:8000"
          - name: KONG_PROXY_LISTEN_SSL
            value: "0.0.0.0:8443"
          - name: KONG_ADMIN_LISTEN
            value: "0.0.0.0:8001"
          - name: KONG_DATABASE
            value: "postgres"
          - name: KONG_PG_USER
            value: "kong"
          - name: KONG_PG_PASSWORD
            value: "kongpass"
          - name: KONG_PG_HOST
            value: "postgres-service"

        ports:
          - containerPort: 8000
          - containerPort: 8443
          - containerPort: 8001

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kong-db
  namespace: egs-mar-ket-place
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kong-db
  template:
    metadata:
      labels:
        app: kong-db
    spec:
      containers:
        - name: postgres
          image: postgres:13
          env:
            - name: POSTGRES_USER
              value: "kong"
            - name: POSTGRES_PASSWORD
              value: "kongpass"
            - name: POSTGRES_DB
              value: "kong"
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgres-kong-volume
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-kong-volume
          persistentVolumeClaim:
            claimName: postgres-kong-volume-claim
# ads deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ads
  namespace: egs-mar-ket-place
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ads
  template:
    metadata:
      labels:
        app: ads
    spec:
      securityContext:
        runAsUser: 1001
      containers:
        - name: ads
          image: registry.deti:5000/mar_ket/ads:v1
          ports:
            - containerPort: 3000
          env:
            - name: PORT
              value: "3000"
            - name: MONGODB_URI
              value: "mongodb://bn_parse:bitnami123@mongodb-ads-service:27017/bitnami_parse"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb-ads
  namespace: egs-mar-ket-place
spec:
  serviceName: mongodb-ads
  replicas: 1
  selector:
    matchLabels:
      app: mongodb-ads
  template:
    metadata:
      labels:
        app: mongodb-ads
    spec:
      containers:
        - name: mongodb-ads
          image: bitnami/mongodb:latest
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongodb-data-ads
              mountPath: /data/db
          env:
            - name: MONGODB_USERNAME
              value: "bn_parse"
            - name: MONGODB_DATABASE 
              value: "bitnami_parse"
            - name: MONGODB_PASSWORD 
              value: "bitnami123"
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: PATH 
              value: "/opt/bitnami/mongodb/bin:/opt/bitnami/common/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
            - name: BITNAMI_APP_NAME 
              value: "mongodb"
      volumes:
        - name: "mongodb-data-ads"
          persistentVolumeClaim:
            claimName: mongo-data-ads

# user app deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: userapp
  namespace: egs-mar-ket-place
spec:
  replicas: 3
  selector:
    matchLabels:
      app: userapp
  template:
    metadata:
      labels:
        app: userapp
    spec:
      containers:
      - name: userapp
        image: registry.deti:5000/mar_ket/userapp:v1
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        ports:
        - containerPort: 80
        env:
        - name: REACT_APP_KONGURI
          value: 'marketplace.deti'
        - name: REACT_APP_AUTHAPI
          value: 'marketplace.deti:5001'
        - name: REACT_APP_ADSURI
          value: 'marketplace.deti:5002'

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: konga-dashboard
  namespace: egs-mar-ket-place
spec:
  replicas: 3
  selector:
    matchLabels:
      app: konga-dashboard
  template:
    metadata:
      labels:
        app: konga-dashboard
    spec:
      containers:
      - name: konga-dashboard
        image: pantsel/konga
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "512Gi"
            cpu: "500m"
        ports:
        - containerPort: 1337

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: egs-mar-ket-place
spec:
  serviceName: redis
  replicas: 3
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      initContainers:
      - name: config
        image: redis:6.2.3-alpine
        command: [ "sh", "-c" ]
        args:
          - |
            cp /tmp/redis/redis.conf /etc/redis/redis.conf
            
            echo "finding master..."
            MASTER_FDQN=`hostname  -f | sed -e 's/redis-[0-9]\./redis-0./'`
            if [ "$(redis-cli -h sentinel -p 5000 ping)" != "PONG" ]; then
              echo "master not found, defaulting to redis-0"

              if [ "$(hostname)" == "redis-0" ]; then
                echo "this is redis-0, not updating config..."
              else
                echo "updating redis.conf..."
                echo "slaveof $MASTER_FDQN 6379" >> /etc/redis/redis.conf
              fi
            else
              echo "sentinel found, finding master"
              MASTER="$(redis-cli -h sentinel -p 5000 sentinel get-master-addr-by-name mymaster | grep -E '(^redis-\d{1,})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})')"
              echo "master found : $MASTER, updating redis.conf"
              echo "slaveof $MASTER 6379" >> /etc/redis/redis.conf
            fi
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis/
        - name: config
          mountPath: /tmp/redis/
      containers:
      - name: redis
        image: redis:6.2.3-alpine
        command: ["redis-server"]
        args: ["/etc/redis/redis.conf"]
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - name: data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis/
      volumes:
      - name: redis-config
        emptyDir: {}
      - name: config
        configMap:
          name: redis-config
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "local-storage"
      resources:
        requests:
          storage: 500Mi
# Services
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: egs-mar-ket-place
spec:
  clusterIP: None
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  selector:
    app: redis
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-ads-service
  namespace: egs-mar-ket-place
spec:
  ports:
  - port: 27017
    protocol: TCP
    targetPort: 27017
  selector:
    app: mongodb-ads
---

apiVersion: v1
kind: Service
metadata:
  name: konga-service
  namespace: egs-mar-ket-place
spec:
  selector:
    app: konga-dashboard
  ports:
    - protocol: TCP
      port: 1337
      targetPort: 1337
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-parse-service
  namespace: egs-mar-ket-place
spec:
  ports:
  - port: 27017
    protocol: TCP
    targetPort: 27017
  selector:
    app: mongodb-parse
# use this service so that i can spin up a migration kong
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: egs-mar-ket-place
spec:
  selector:
    app: kong-db
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432

apiVersion: v1
kind: Service
metadata:
  name: sales-db-service
  namespace: egs-mar-ket-place
spec:
  selector:
    app: sales-db
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432

---
apiVersion: v1
kind: Service
metadata:
  name: parse-service
  namespace: egs-mar-ket-place
spec:
  selector:
    app: parse-server
  ports:
    - protocol: TCP
      port: 1337
      targetPort: 1337
---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: egs-mar-ket-place
spec:
  selector:
    app: authservice
  ports:
    - protocol: TCP
      port: 5001
      targetPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: ads-service
  namespace: egs-mar-ket-place
spec:
  selector:
    app: ads
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: payments-service
  namespace: egs-mar-ket-place
spec:
  selector:
    app: payments
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
---
apiVersion: v1
kind: Service
metadata:
  name: sales-service
  namespace: egs-mar-ket-place
spec:
  selector:
    app: sales
  ports:
    - protocol: TCP
      port: 8888
      targetPort: 8888
---
apiVersion: v1
kind: Service
metadata:
  name: products-service
  namespace: egs-mar-ket-place
spec:
  selector:
    app: products
  ports:
    - protocol: TCP
      port: 8888
      targetPort: 8888
---
apiVersion: v1
kind: Service
metadata:
  name: entities-service
  namespace: egs-mar-ket-place
spec:
  selector:
    app: entities
  ports:
    - protocol: TCP
      port: 8888
      targetPort: 8888
---
apiVersion: v1
kind: Service
metadata:
  name: kong-gateway-proxy
  namespace: egs-mar-ket-place
spec:
  ports:
  - name: 
    port: 8000
    targetPort: 8000
  selector:
    app: kong-gateway

---
apiVersion: v1
kind: Service
metadata:
  name: kong-gateway-admin-api
  namespace: egs-mar-ket-place
spec:
  ports:
  - name: 
    port: 8001
    targetPort: 8001
  selector:
    app: kong-gateway





# Routes
---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kong-proxy-ingress
  namespace: egs-mar-ket-place
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/frontend-entry-points: http
    traefik.ingress.kubernetes.io/redirect-entry-point: http
    traefik.ingress.kubernetes.io/redirect-permanent: "true"
    traefik.ingress.kubernetes.io/router.middlewares: egs-mar-ket-place-strip-kong@kubernetescrd
spec:
  rules:
  - host: marketplace.deti
    http:
      paths:
      - path: /proxy
        pathType: Prefix
        backend:
          service:
            name: kong-gateway-proxy
            port: 
              number: 8000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kong-admin-ingress
  namespace: egs-mar-ket-place
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/frontend-entry-points: http
    traefik.ingress.kubernetes.io/redirect-entry-point: http
    traefik.ingress.kubernetes.io/redirect-permanent: "true"
    traefik.ingress.kubernetes.io/router.middlewares: egs-mar-ket-place-strip-kong@kubernetescrd
spec:
  rules:
  - host: marketplace.deti
    http:
      paths:
      - path: /admin
        pathType: Prefix
        backend:
          service:
            name: kong-gateway-admin-api
            port: 
              number: 8001
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  namespace: egs-mar-ket-place
  name: strip-kong
spec:
  stripPrefixRegex:
    regex:
      - "^/[^/]+"

